[{"path":"http://aberhrml.github.io/binneR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"http://aberhrml.github.io/binneR/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"http://aberhrml.github.io/binneR/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"http://aberhrml.github.io/binneR/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"http://aberhrml.github.io/binneR/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"http://aberhrml.github.io/binneR/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"http://aberhrml.github.io/binneR/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"http://aberhrml.github.io/binneR/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"http://aberhrml.github.io/binneR/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"http://aberhrml.github.io/binneR/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"http://aberhrml.github.io/binneR/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"http://aberhrml.github.io/binneR/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"http://aberhrml.github.io/binneR/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"http://aberhrml.github.io/binneR/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"http://aberhrml.github.io/binneR/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"http://aberhrml.github.io/binneR/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"http://aberhrml.github.io/binneR/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"http://aberhrml.github.io/binneR/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"http://aberhrml.github.io/binneR/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"http://aberhrml.github.io/binneR/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"http://aberhrml.github.io/binneR/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) 2019 Jasen Finch  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. binneR Copyright (C) 2019 Jasen Finch This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"http://aberhrml.github.io/binneR/articles/binneR.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"binneR","text":"binneR package provides spectral binning approach routine processing flow infusion electrospray - high resolution mass spectrometry (FIE-HRMS) metabolomic fingerprinting experiments, results can used subsequent statistical analyses. Spectral binning rounds high resolution fingerprinting data specified amu bin width. FIE-HRMS data consists ‘plug flow’, across MS signal intensities can averaged provide metabolome fingerprint. shows animation spectrum change across ‘plug flow’ region example FIE-HRMS injection acquired negative ionisation mode.  Spectral binning applied scan scan basis data rounded specified bin width, signals sum aggregated intensities averaged across specified scans. Prior use binneR, vendor specific raw data files need converted one open source file formats .mzXML .mzML can parsed R. Data also centroided reduce bin splitting artefacts profile data can introduce spectral binning. msconvert tool can used data conversion centroiding, allowing use vendor specific algorithms. two main functionalities provided package. Simple intensity matrix production - quick FIE-HRMS matrix investigations. binneRlyse - processing routine metabolomics fingerprinting experiments. subsequent sections outline use two main functionalities. begin, necessary packages need loaded.","code":"library(binneR) library(metaboData)"},{"path":"http://aberhrml.github.io/binneR/articles/binneR.html","id":"parallel-processing","dir":"Articles","previous_headings":"","what":"Parallel Processing","title":"binneR","text":"package supports parallel processing using future package. default processing binneR done sequentially. However, parallel processing can activated prior processing specifying parallel back-end using plan(). following example specifies using multisession back-end (multiple background R sessions) two worker processes. See future package documentation information types parallel back-ends available.","code":"plan(future::multisession,workers = 2)"},{"path":"http://aberhrml.github.io/binneR/articles/binneR.html","id":"infusion-scan-detection","dir":"Articles","previous_headings":"","what":"Infusion Scan Detection","title":"binneR","text":"order apply spectral binning approach FIE-HRMS data, infusion scans need detected. set specified file paths, range infusion scans can detected using following: detected scans can checked plotting averaged chromatogram files. infusion scans can also plotted supplying range scans argument.","code":"infusionScans <- detectInfusionScans(     metaboData::filePaths('FIE-HRMS','BdistachyonTechnical')[1],     thresh = 0.5 ) plotChromFromFile(     metaboData::filePaths('FIE-HRMS','BdistachyonTechnical')[1],     scans = infusionScans )"},{"path":"http://aberhrml.github.io/binneR/articles/binneR.html","id":"simple-intensity-matrix-production---quick-fie-hrms-matrix-investigations","dir":"Articles","previous_headings":"","what":"Simple Intensity Matrix Production - quick FIE-HRMS matrix investigations","title":"binneR","text":"simplest funtionality binneR read raw data vector specified file paths, bin given amu aggregate across given scan window. can useful quick assessment FIE-HRMS data structures. Spectral binning can performed using readFiles() function shown . example file within package can specified using following. data can spectrally binned using: return list containing intensity matrices ionisation mode, rows individual samples columns spectral bins.","code":"file <- metaboData::filePaths('FIE-HRMS','BdistachyonTechnical')[1] res <- readFiles(file,dp = 2,scans = infusionScans)"},{"path":"http://aberhrml.github.io/binneR/articles/binneR.html","id":"binnerlyse---metabolomics-fingerprinting-experiments","dir":"Articles","previous_headings":"","what":"binneRlyse - metabolomics fingerprinting experiments","title":"binneR","text":"Routine FIE-HRMS metabolomic fingerprinting experiments can require rapid processing hundereds MS files also require sample information biological classes subsequent statistical analyses. package allows Binalysis formalises spectral binning approach using S4 class bins data 0.01 amu also extract accurate m/z bins based 0.00001 amu binned data. accurate m/z data can aggregated based specified class structure modal accurate m/z extracted. bin metrics also computed allow assessment quality 0.01 amu bins. example data used metaboData package consists 10 replicate injections leaf tissue extract model grass species Brachypodium distachyon.","code":""},{"path":"http://aberhrml.github.io/binneR/articles/binneR.html","id":"basic-usage","dir":"Articles","previous_headings":"binneRlyse - metabolomics fingerprinting experiments","what":"Basic Usage","title":"binneR","text":"Firstly file paths sample information can loaded example data set using following: two main functions processing experimental data: detectParameters() - allows auto detection processing parameters. binParameters() can use manually dplyr::select parameters. binneRlyse() - input data file paths sample information process using selected parameters.","code":"info <- metaboData::runinfo('FIE-HRMS','BdistachyonTechnical')  files <-  metaboData::filePaths('FIE-HRMS','BdistachyonTechnical')"},{"path":"http://aberhrml.github.io/binneR/articles/binneR.html","id":"sample-information","dir":"Articles","previous_headings":"binneRlyse - metabolomics fingerprinting experiments > Basic Usage","what":"Sample information","title":"binneR","text":"binneRlyse() requires provision sample information (info) experimental run processed. csv format recommended column headers include: fileOrder - file order alphabetical order returned list.files() injOrder - injection order samples FIE-HRMS analysis fileName - sample file name batch - sample batch block - randomised block sample name - sample name class - sample class row orders info file match order files paths submitted binneRlyse() processing function.","code":""},{"path":"http://aberhrml.github.io/binneR/articles/binneR.html","id":"parameters","dir":"Articles","previous_headings":"binneRlyse - metabolomics fingerprinting experiments > Basic Usage","what":"Parameters","title":"binneR","text":"Prior spectral binning processing parameters first need selected. binning parameter can detected using detectParameters() function shown . parameters specify following: scans - scan indexes use binning cls - column info contains class information relevant Alternatively, parameters can initialised using binParameters function shown . already initialised BinParameters object, parameters can changed using methods named parameter interest. example change scans given object:","code":"parameters <- detectParameters(files) parameters <- binParameters(scans = 6:14) alternative_parameters <- parameters scans(alternative_parameters) <- 6:14"},{"path":"http://aberhrml.github.io/binneR/articles/binneR.html","id":"processing","dir":"Articles","previous_headings":"binneRlyse - metabolomics fingerprinting experiments > Basic Usage","what":"Processing","title":"binneR","text":"Processing simple requires use binneRlyse() function. input function vector paths data files process, tibble::tibble containing sample info BinParameters object. crucial positions sample information info file match sample positions within files vector. shows example can checked matching file names present info vector. Spectral binning can performed following. data quality inspection, infusion profiles data can plotted using: spectrum fingerprints using: total ion counts using: Density profiles individual bins can plotted :","code":"TRUE %in% (info$fileName != basename(files)) analysis <- binneRlyse(files,info,parameters) plotChromatogram(analysis) plotFingerprint(analysis) plotTIC(analysis) plotBin(analysis,'n133.01',type = 'cls')"},{"path":"http://aberhrml.github.io/binneR/articles/binneR.html","id":"data-extraction","dir":"Articles","previous_headings":"binneRlyse - metabolomics fingerprinting experiments > Basic Usage","what":"Data Extraction","title":"binneR","text":"number functions can used return processing data Binalysis object: info() sample information binnedData() spectrally binned matrices accurateData() accurate mass information bin measures 0.01 amu bins","code":""},{"path":"http://aberhrml.github.io/binneR/articles/binneR.html","id":"bin-metrics","dir":"Articles","previous_headings":"binneRlyse - metabolomics fingerprinting experiments","what":"Bin Metrics","title":"binneR","text":"number metrics can computed allow assessment quality given 0.01 amu bin terms accurate m/z mzR::peaks present within boundaries. include purity centrality.","code":""},{"path":"http://aberhrml.github.io/binneR/articles/binneR.html","id":"purity","dir":"Articles","previous_headings":"binneRlyse - metabolomics fingerprinting experiments > Bin Metrics","what":"Purity","title":"binneR","text":"Bin purity gives metric spread accurate m/z mzR::peaks found within given bin can signal presences multiple real spectral mzR::peaks within bin. purity metric value 0 1 purity closer 1 indicating accurate m/z present within bin found narrow region therefore likely result 1 real mass spectral peak. reduction purity indicate presence multiple mzR::peaks present within bin. shows example density plots two negative ionisation mode 0.01 amu bins showing high (n133.01) low (n146.97) purity respectively.  Bin n133.01, purity close 1, one peak present. Bin n405.11, reduced purity, clearly two peaks present.","code":""},{"path":"http://aberhrml.github.io/binneR/articles/binneR.html","id":"centrality","dir":"Articles","previous_headings":"binneRlyse - metabolomics fingerprinting experiments > Bin Metrics","what":"Centrality","title":"binneR","text":"Bin centrality gives metric close mean accurate m/z centre given bin can give indication whether peak split boundary tow adjacent bins. centrality metric value 0 1 centrality close 1 indicating accurate m/z present within boundaries bin located close centre bin. Low centrality indicate accurate m/z present within bin found close bin boundary therefore indicate bin splitting, mass spectral peak split two adjacent bins. shows example density plots two negative ionisation mode 0.01 amu bins showing high (n88.04) low (n104.03) centrality respectively.  Bin n88.04 high centrality single peak located close center bin. Whereas bin n104.03 low centrality single peak located close upper boundary bin indicate split bin bin n104.04.","code":""},{"path":"http://aberhrml.github.io/binneR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jasen Finch. Author, maintainer.","code":""},{"path":"http://aberhrml.github.io/binneR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Finch J (2023). binneR: Spectral Processing High Resolution Flow Infusion Mass Spectrometry. https://aberhrml.github.io/binneR/, http://aberhrml.github.io/binneR/.","code":"@Manual{,   title = {binneR: Spectral Processing for High Resolution Flow Infusion Mass Spectrometry},   author = {Jasen Finch},   year = {2023},   note = {https://aberhrml.github.io/binneR/, http://aberhrml.github.io/binneR/}, }"},{"path":"http://aberhrml.github.io/binneR/index.html","id":"binner-","dir":"","previous_headings":"","what":"Spectral Processing for High Resolution Flow Infusion Mass Spectrometry","title":"Spectral Processing for High Resolution Flow Infusion Mass Spectrometry","text":"Spectral Processing High Resolution Flow Infusion Mass Spectrometry spectral binning approach flow infusion electrospray high resolution mass spectrometry (FIE-HRMS) metabolome fingerprinting data. package includes integrated workflow generating spectrally binned intensity matrices converted raw data file formats .mzML .mzXML. also tools plotting chromatograms, spectra total ion counts. methodology outlined article: Finch, J.P., Wilson, T., Lyons, L., Phillips, H., Beckmann, M. Draper, J., 2022. Spectral binning approach post-acquisition processing high resolution FIE-MS metabolome fingerprinting data. Metabolomics, 18(8), pp.1-9.","code":""},{"path":"http://aberhrml.github.io/binneR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Spectral Processing for High Resolution Flow Infusion Mass Spectrometry","text":"download install development version run:","code":"remotes::install_github('aberHRML/binneR')"},{"path":"http://aberhrml.github.io/binneR/index.html","id":"learn-more","dir":"","previous_headings":"","what":"Learn more","title":"Spectral Processing for High Resolution Flow Infusion Mass Spectrometry","text":"package documentation can browsed online https://aberHRML.github.io/binneR/. first time using binneR see vignette information get started. believe ’ve found bug binneR, please file bug (, possible, reproducible example) https://github.com/aberHRML/binneR/issues.","code":""},{"path":"http://aberhrml.github.io/binneR/reference/BinParameters-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Spectral binning parameters class — BinParameters-class","title":"Spectral binning parameters class — BinParameters-class","text":"S4 class store spectral binning parameters.","code":""},{"path":"http://aberhrml.github.io/binneR/reference/BinParameters-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Spectral binning parameters class — BinParameters-class","text":"scans numeric vector containing scan indexes use binning cls column class labels use aggregating accurate  mass data. Defaults NULL accurate mass data averaged  across samples","code":""},{"path":[]},{"path":"http://aberhrml.github.io/binneR/reference/Binalysis-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Spectral binning analysis class — Binalysis-class","title":"Spectral binning analysis class — Binalysis-class","text":"S4 class store spectrally binned data accurate  mass information.","code":""},{"path":"http://aberhrml.github.io/binneR/reference/Binalysis-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Spectral binning analysis class — Binalysis-class","text":"version package version creation_date creation date file_paths file paths raw data sample_info tibble containing runinfo data binned_data list containing tibbles spectrally binned data  acquisition mode accurate_mz tibble containin accurate mass information spectra list containing tibbles headers class master  mix fingerprints","code":""},{"path":[]},{"path":"http://aberhrml.github.io/binneR/reference/binParameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Set spectral binning parameters — binParameters","title":"Set spectral binning parameters — binParameters","text":"Selection parameters use spectral binning.","code":""},{"path":"http://aberhrml.github.io/binneR/reference/binParameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set spectral binning parameters — binParameters","text":"","code":"binParameters(scans = 5:12, cls = character())"},{"path":"http://aberhrml.github.io/binneR/reference/binParameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set spectral binning parameters — binParameters","text":"scans numeric vector containing scan indexes use binning cls column class labels use aggregating accurate  mass data. Defaults NULL accurate mass data averaged  accross samples","code":""},{"path":"http://aberhrml.github.io/binneR/reference/binParameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set spectral binning parameters — binParameters","text":"S4 object class BinParameters","code":""},{"path":[]},{"path":"http://aberhrml.github.io/binneR/reference/binParameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set spectral binning parameters — binParameters","text":"","code":"p <- binParameters(scans = 6:17)"},{"path":"http://aberhrml.github.io/binneR/reference/binneRlyse.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform spectral binning — binneRlyse","title":"Perform spectral binning — binneRlyse","text":"perform spectral binning.","code":""},{"path":"http://aberhrml.github.io/binneR/reference/binneRlyse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform spectral binning — binneRlyse","text":"","code":"binneRlyse(files, info, parameters = binParameters(), verbose = TRUE)"},{"path":"http://aberhrml.github.io/binneR/reference/binneRlyse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform spectral binning — binneRlyse","text":"files character vector file paths use spectral binning info tibble containing sample information parameters object class BinParameters containing parameters  spectral binning verbose show console output","code":""},{"path":"http://aberhrml.github.io/binneR/reference/binneRlyse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform spectral binning — binneRlyse","text":"S4 object class Binalysis.","code":""},{"path":"http://aberhrml.github.io/binneR/reference/binneRlyse.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform spectral binning — binneRlyse","text":"Parallel processing managed future package. can  specified using plan() function. See example  ?future::plan details can specified. default, spectral binning performed recommended 2 decimal  places. can altered setting either global option  binner_dp environment variable BINNER_DP.","code":""},{"path":[]},{"path":"http://aberhrml.github.io/binneR/reference/binneRlyse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform spectral binning — binneRlyse","text":"","code":"if (FALSE) { files <- metaboData::filePaths('FIE-HRMS','BdistachyonTechnical')  info <- metaboData::runinfo('FIE-HRMS','BdistachyonTechnical')  parameters <- detectParameters(files) cls(parameters) <- 'class'  ## Optionally declare parallel processing backend # plan(future::multisession,workers = 2)  analysis <- binneRlyse(files,                         info,                         parameters = parameters) }"},{"path":"http://aberhrml.github.io/binneR/reference/detectInfusionScans.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect infusion profile scan range — detectInfusionScans","title":"Detect infusion profile scan range — detectInfusionScans","text":"Detect infusion scans set FIE-MS infusion profiles.","code":""},{"path":"http://aberhrml.github.io/binneR/reference/detectInfusionScans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect infusion profile scan range — detectInfusionScans","text":"","code":"detectInfusionScans(files, thresh = 0.5)"},{"path":"http://aberhrml.github.io/binneR/reference/detectInfusionScans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect infusion profile scan range — detectInfusionScans","text":"files character vector file paths use thresh detection threshold proportion peak  infusion profile","code":""},{"path":"http://aberhrml.github.io/binneR/reference/detectInfusionScans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect infusion profile scan range — detectInfusionScans","text":"Numeric vector detected infusion scans.","code":""},{"path":[]},{"path":"http://aberhrml.github.io/binneR/reference/detectInfusionScans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect infusion profile scan range — detectInfusionScans","text":"","code":"file_paths <- system.file('example-data/1.mzML.gz',package = 'binneR')  detectInfusionScans(file_paths) #> [1]  5  6  7  8  9 10 11 12 13"},{"path":"http://aberhrml.github.io/binneR/reference/detectParameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect suitable spectral binning parameters — detectParameters","title":"Detect suitable spectral binning parameters — detectParameters","text":"Detect binning parameters given list file paths.","code":""},{"path":"http://aberhrml.github.io/binneR/reference/detectParameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect suitable spectral binning parameters — detectParameters","text":"","code":"detectParameters(files)"},{"path":"http://aberhrml.github.io/binneR/reference/detectParameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect suitable spectral binning parameters — detectParameters","text":"files character vector file paths","code":""},{"path":"http://aberhrml.github.io/binneR/reference/detectParameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect suitable spectral binning parameters — detectParameters","text":"S4 object class BinParameters","code":""},{"path":[]},{"path":"http://aberhrml.github.io/binneR/reference/detectParameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect suitable spectral binning parameters — detectParameters","text":"","code":"file_paths <-system.file('example-data/1.mzML.gz',package = 'binneR') parameters <- detectParameters(file_paths)"},{"path":"http://aberhrml.github.io/binneR/reference/parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and set spectral binning parameters — scans","title":"Get and set spectral binning parameters — scans","text":"Get set spectral binning parameters.","code":""},{"path":"http://aberhrml.github.io/binneR/reference/parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and set spectral binning parameters — scans","text":"","code":"scans(x)  scans(x) <- value  cls(x)  cls(x) <- value  # S4 method for BinParameters scans(x)  # S4 method for BinParameters scans(x) <- value  # S4 method for BinParameters cls(x)  # S4 method for BinParameters cls(x) <- value"},{"path":"http://aberhrml.github.io/binneR/reference/parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and set spectral binning parameters — scans","text":"x S4 object class BinParameters value parameter value set","code":""},{"path":[]},{"path":"http://aberhrml.github.io/binneR/reference/plotBin.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a spectral bin feature — plotBin","title":"Plot a spectral bin feature — plotBin","text":"Kernal density plot specified spectral bin feature.","code":""},{"path":"http://aberhrml.github.io/binneR/reference/plotBin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a spectral bin feature — plotBin","text":"","code":"plotBin(x, bin, type = c(\"all\", \"cls\", \"sample\"))  # S4 method for Binalysis plotBin(x, bin, type = c(\"all\", \"cls\", \"sample\"))"},{"path":"http://aberhrml.github.io/binneR/reference/plotBin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a spectral bin feature — plotBin","text":"x S4 object class Binalysis bin 0.01amu bin plot type bin plotted total (), class (cls)  sample spectra.","code":""},{"path":[]},{"path":"http://aberhrml.github.io/binneR/reference/plotCentrality.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot bin centrality histogram — plotCentrality","title":"Plot bin centrality histogram — plotCentrality","text":"Plot bin centrality distribution Binalysis object.","code":""},{"path":"http://aberhrml.github.io/binneR/reference/plotCentrality.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot bin centrality histogram — plotCentrality","text":"","code":"plotCentrality(x, histBins = 30)  # S4 method for Binalysis plotCentrality(x, histBins = 30)"},{"path":"http://aberhrml.github.io/binneR/reference/plotCentrality.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot bin centrality histogram — plotCentrality","text":"x S4 object class Binalysis histBins number bins use histogram plotting","code":""},{"path":[]},{"path":"http://aberhrml.github.io/binneR/reference/plotChromFromFile.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot an infusion profile chromatogram from a file — plotChromFromFile","title":"Plot an infusion profile chromatogram from a file — plotChromFromFile","text":"Plot averaged infusion profile vector specified  file paths.","code":""},{"path":"http://aberhrml.github.io/binneR/reference/plotChromFromFile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot an infusion profile chromatogram from a file — plotChromFromFile","text":"","code":"plotChromFromFile(files, scans = c())"},{"path":"http://aberhrml.github.io/binneR/reference/plotChromFromFile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot an infusion profile chromatogram from a file — plotChromFromFile","text":"files character vector file paths use scans specify scans highlight within plot","code":""},{"path":"http://aberhrml.github.io/binneR/reference/plotChromFromFile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot an infusion profile chromatogram from a file — plotChromFromFile","text":"","code":"file_paths <- system.file('example-data/1.mzML.gz',package = 'binneR')  plotChromFromFile(file_paths,                    scans = detectInfusionScans(file_paths))"},{"path":"http://aberhrml.github.io/binneR/reference/plotChromatogram.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot an infusion profile chromatogram — plotChromatogram","title":"Plot an infusion profile chromatogram — plotChromatogram","text":"Plot averaged infusion profile chromatogram  Binalysis object.","code":""},{"path":"http://aberhrml.github.io/binneR/reference/plotChromatogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot an infusion profile chromatogram — plotChromatogram","text":"","code":"plotChromatogram(x)  # S4 method for Binalysis plotChromatogram(x)"},{"path":"http://aberhrml.github.io/binneR/reference/plotChromatogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot an infusion profile chromatogram — plotChromatogram","text":"x S4 object class Binalysis","code":""},{"path":[]},{"path":"http://aberhrml.github.io/binneR/reference/plotFingerprint.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a fingerprint mass spectrum — plotFingerprint","title":"Plot a fingerprint mass spectrum — plotFingerprint","text":"Plot averaged spectrum fingerprint.","code":""},{"path":"http://aberhrml.github.io/binneR/reference/plotFingerprint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a fingerprint mass spectrum — plotFingerprint","text":"","code":"plotFingerprint(x)  # S4 method for Binalysis plotFingerprint(x)"},{"path":"http://aberhrml.github.io/binneR/reference/plotFingerprint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a fingerprint mass spectrum — plotFingerprint","text":"x S4 object class Binalysis","code":""},{"path":[]},{"path":"http://aberhrml.github.io/binneR/reference/plotPurity.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot bin purity histogram — plotPurity","title":"Plot bin purity histogram — plotPurity","text":"Plot bin purity distribution Binalysis object.","code":""},{"path":"http://aberhrml.github.io/binneR/reference/plotPurity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot bin purity histogram — plotPurity","text":"","code":"plotPurity(x, histBins = 30)  # S4 method for Binalysis plotPurity(x, histBins = 30)"},{"path":"http://aberhrml.github.io/binneR/reference/plotPurity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot bin purity histogram — plotPurity","text":"x S4 object class Binalysis histBins number bins use histogram plotting","code":""},{"path":[]},{"path":"http://aberhrml.github.io/binneR/reference/plotTIC.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot sample total ion counts — plotTIC","title":"Plot sample total ion counts — plotTIC","text":"Plot sample total ion counts.","code":""},{"path":"http://aberhrml.github.io/binneR/reference/plotTIC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot sample total ion counts — plotTIC","text":"","code":"plotTIC(x, by = \"injOrder\", colour = \"block\")  # S4 method for Binalysis plotTIC(x, by = \"injOrder\", colour = \"block\")"},{"path":"http://aberhrml.github.io/binneR/reference/plotTIC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot sample total ion counts — plotTIC","text":"x S4 object class Binalysis info column plot colour info column provide colour labels","code":""},{"path":[]},{"path":"http://aberhrml.github.io/binneR/reference/readBinningParameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Read binning parameters from file — readBinningParameters","title":"Read binning parameters from file — readBinningParameters","text":"Parse binning parameters YAML formatted file.","code":""},{"path":"http://aberhrml.github.io/binneR/reference/readBinningParameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read binning parameters from file — readBinningParameters","text":"","code":"readBinningParameters(file)"},{"path":"http://aberhrml.github.io/binneR/reference/readBinningParameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read binning parameters from file — readBinningParameters","text":"file file path","code":""},{"path":"http://aberhrml.github.io/binneR/reference/readBinningParameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read binning parameters from file — readBinningParameters","text":"S4 object class BinParameters.","code":""},{"path":[]},{"path":"http://aberhrml.github.io/binneR/reference/readBinningParameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read binning parameters from file — readBinningParameters","text":"","code":"file <- system.file('binning_parameters.yml',package = 'binneR') parameters <- readBinningParameters(file)"},{"path":"http://aberhrml.github.io/binneR/reference/readFiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and process mulitple data files — readFiles","title":"Read and process mulitple data files — readFiles","text":"Apply spectral binning multiple data files.","code":""},{"path":"http://aberhrml.github.io/binneR/reference/readFiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and process mulitple data files — readFiles","text":"","code":"readFiles(files, dp, scans)"},{"path":"http://aberhrml.github.io/binneR/reference/readFiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and process mulitple data files — readFiles","text":"files vector converted data file paths dp integer denoting number decimal places spectral  binning scans vector scan numbers retrieved","code":""},{"path":"http://aberhrml.github.io/binneR/reference/readFiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and process mulitple data files — readFiles","text":"list containing peak lists relevant scans combined  scan ranges present mode data file.","code":""},{"path":"http://aberhrml.github.io/binneR/reference/readFiles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read and process mulitple data files — readFiles","text":"Parallel processing managed future package. can  specified using plan() function. See example  ?future::plan details can specified.","code":""},{"path":"http://aberhrml.github.io/binneR/reference/readFiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and process mulitple data files — readFiles","text":"","code":"## Example file path file_paths <- system.file('example-data/1.mzML.gz',package = 'binneR')  ## Optionally declare parallel processing backend # plan(future::multisession,workers = 2)                                                                          ## Process example file res <- readFiles(file_paths,                  dp = 2,                  scans = detectInfusionScans(file_paths))"},{"path":"http://aberhrml.github.io/binneR/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. future plan magrittr %>%","code":""},{"path":"http://aberhrml.github.io/binneR/reference/results.html","id":null,"dir":"Reference","previous_headings":"","what":"Binalysis class get methods — version","title":"Binalysis class get methods — version","text":"Methods accessing spectral binning results  Binalysis S4 class.","code":""},{"path":"http://aberhrml.github.io/binneR/reference/results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Binalysis class get methods — version","text":"","code":"version(x)  creationDate(x)  filePaths(x)  sampleInfo(x)  binnedData(x)  accurateData(x)  binningParameters(x)  # S4 method for Binalysis version(x)  # S4 method for Binalysis creationDate(x)  # S4 method for Binalysis filePaths(x)  # S4 method for Binalysis sampleInfo(x)  # S4 method for Binalysis binnedData(x)  # S4 method for Binalysis accurateData(x)  # S4 method for Binalysis binningParameters(x)"},{"path":"http://aberhrml.github.io/binneR/reference/results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Binalysis class get methods — version","text":"x S4 object class Binalysis","code":""},{"path":"http://aberhrml.github.io/binneR/reference/results.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Binalysis class get methods — version","text":"version - Extract package version used create object. creationDate - Extract creation date object. filePaths - Extract sample file paths. sampleInfo - Extract sample meta information. binnedData - Extract binned data intensity matrix. accurateData - Extract sample-wise accurate mass data bin measures. binningParametesrExtract binning parameters.","code":""},{"path":[]},{"path":"http://aberhrml.github.io/binneR/reference/show.html","id":null,"dir":"Reference","previous_headings":"","what":"Show methods for spectral binning classes — show,BinParameters-method","title":"Show methods for spectral binning classes — show,BinParameters-method","text":"Show methods spectral binning classes.","code":""},{"path":"http://aberhrml.github.io/binneR/reference/show.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show methods for spectral binning classes — show,BinParameters-method","text":"","code":"# S4 method for BinParameters show(object)  # S4 method for Binalysis show(object)"},{"path":"http://aberhrml.github.io/binneR/reference/show.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show methods for spectral binning classes — show,BinParameters-method","text":"object S4 objects class BinParameters Binanalysi","code":""},{"path":"http://aberhrml.github.io/binneR/reference/show.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Show methods for spectral binning classes — show,BinParameters-method","text":"Jasen Finch jsf9@aber.ac.uk","code":""},{"path":"http://aberhrml.github.io/binneR/reference/singleSample.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform single sample spectral binning — singleSample","title":"Perform single sample spectral binning — singleSample","text":"Perform spectral binning single sample.","code":""},{"path":"http://aberhrml.github.io/binneR/reference/singleSample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform single sample spectral binning — singleSample","text":"","code":"singleSample(file, class = NA, verbose = TRUE)"},{"path":"http://aberhrml.github.io/binneR/reference/singleSample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform single sample spectral binning — singleSample","text":"file file path class optional class name verbose show console output","code":""},{"path":"http://aberhrml.github.io/binneR/reference/singleSample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform single sample spectral binning — singleSample","text":"S4 object class Binalysis.","code":""},{"path":"http://aberhrml.github.io/binneR/reference/singleSample.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform single sample spectral binning — singleSample","text":"Parallel processing managed future package. can  specified using plan() function. See example  ?future::plan details can specified. default, spectral binning performed recommended 2 decimal  places. can altered setting either global option  binner_dp environment variable BINNER_DP.","code":""},{"path":[]},{"path":"http://aberhrml.github.io/binneR/reference/singleSample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform single sample spectral binning — singleSample","text":"","code":"if (FALSE) { file_path <- metaboData::filePaths('FIE-HRMS','BdistachyonTechnical')[1]  ## Optionally declare parallel processing backend # plan(future::multisession,workers = 2)  bd <- singleSample(file_path) }"},{"path":"http://aberhrml.github.io/binneR/news/index.html","id":"binner-264","dir":"Changelog","previous_headings":"","what":"binneR 2.6.4","title":"binneR 2.6.4","text":"Ensure duplicated files aggregated spectral binning.","code":""},{"path":"http://aberhrml.github.io/binneR/news/index.html","id":"binner-263","dir":"Changelog","previous_headings":"","what":"binneR 2.6.3","title":"binneR 2.6.3","text":"Fix calculation quartiles binneR::plotTIC. Added DOI methodology article (https://doi.org/10.1007/s11306-022-01923-6) package DESCRIPTION README.","code":""},{"path":"http://aberhrml.github.io/binneR/news/index.html","id":"binner-262","dir":"Changelog","previous_headings":"","what":"binneR 2.6.2","title":"binneR 2.6.2","text":"Improved themes plotting functions. Reduced object size returned plotting functions.","code":""},{"path":"http://aberhrml.github.io/binneR/news/index.html","id":"binner-261","dir":"Changelog","previous_headings":"","what":"binneR 2.6.1","title":"binneR 2.6.1","text":"Fixed performance loss bin metric calculation caused binning width retrieval.","code":""},{"path":"http://aberhrml.github.io/binneR/news/index.html","id":"binner-260","dir":"Changelog","previous_headings":"","what":"binneR 2.6.0","title":"binneR 2.6.0","text":"Removed LazyData field DESCRIPTION file. Removed Remotes field DESCRIPTION file metaboData dependency now available CRAN. number decimal places used spectral binning can now specified using binner_dp global option BINNER_DP environment variable. vignette example now uses BdistachyonTechnical data set metaboData. -package example data file now used documentation examples. vignette chunks require metaboData package longer executed avoid GitHub API rate limit issues. file header gathering iostream error now fixed large data sets (> 1000 samples).","code":""},{"path":"http://aberhrml.github.io/binneR/news/index.html","id":"binner-253","dir":"Changelog","previous_headings":"","what":"binneR 2.5.3","title":"binneR 2.5.3","text":"Removed potential errors build intensity matrices identical accurate m/z retrieved bin multiple samples.","code":""},{"path":"http://aberhrml.github.io/binneR/news/index.html","id":"binner-252","dir":"Changelog","previous_headings":"","what":"binneR 2.5.2","title":"binneR 2.5.2","text":"Fixed /O issues sample sets ~1200. Minor alteration console output.","code":""},{"path":"http://aberhrml.github.io/binneR/news/index.html","id":"binner-251","dir":"Changelog","previous_headings":"","what":"binneR 2.5.1","title":"binneR 2.5.1","text":"Performance memory usage gains ensuring 0 values read raw files. Added console output processing steps binneR::binneRlyse() `binneR::singleSample().","code":""},{"path":"http://aberhrml.github.io/binneR/news/index.html","id":"binner-250","dir":"Changelog","previous_headings":"","what":"binneR 2.5.0","title":"binneR 2.5.0","text":"S4 class Binalysis now inherits S4 class BinParameters. Fixed retrieval example data usage vignette version creation_date slots added Binalysis S4 class. Added additional accessor methods Binalysis S4 class. Fixed declaration generics ensure declared standard generics. Added validators Binalysis S4 class ensure sample information contains correct fields file names specified paths match sample information.","code":""},{"path":"http://aberhrml.github.io/binneR/news/index.html","id":"binner-242","dir":"Changelog","previous_headings":"","what":"binneR 2.4.2","title":"binneR 2.4.2","text":"Bin measures now correctly averaged across samples binneR::plotCentrality() binneR::plotPurity().","code":""},{"path":"http://aberhrml.github.io/binneR/news/index.html","id":"binner-241","dir":"Changelog","previous_headings":"","what":"binneR 2.4.1","title":"binneR 2.4.1","text":"Fixed errors binneR::plotCentrality() binneR::plotPurity().","code":""},{"path":"http://aberhrml.github.io/binneR/news/index.html","id":"binner-240","dir":"Changelog","previous_headings":"","what":"binneR 2.4.0","title":"binneR 2.4.0","text":"Added NEWS.md file track changes package. pkgdown site available https://aberHRML.github.io/binneR/. Added binneR::readBinningParameters() parsing binning parameters YAML format. Accurate mass data bin measures now returned (binneR::accurateData()) per sample per class previously. 0.01 amu bins can now plotted either averaged across , class (cls), sample using type argument binneR::plotBin(). pipe (%>%) magrittr package now re-exported. Unit test coverage now increased 100%. Updated function documentation examples. Parallel processing binneR now implemented using future package. Information can now used available usage vignette. plan() future package now re-exported.","code":""}]
